version: "3.5"
services:
  memcached:
    container_name: memcached
    image: memcached:alpine
    environment:
      TZ: Asia/Tokyo
    ports:
      - "11211:11211"
    networks:
      - default
      - development

  redis:
    container_name: redis
    build:
      context: ./backend/redis
      dockerfile: Dockerfile.redis
    command: confd -backend env
    environment:
      TZ: Asia/Tokyo
      REDIS_DEBUG_LEVEL: notice
      REDIS_SERVICE_PORT: 6379
      REDIS_KEEPALIVE_TIME: 300
      REDIS_TIMEOUT: 600
      REDIS_TCP_BACKLOG: 255
      REDIS_MAXCLIENT: 1500
      REDIS_MAXMEMORY: 24mb
      REDIS_DATABASECOUNT: 8
    ports:
      - "6379:6379"
    volumes:
      - redisstore:/data
    networks:
      - default
      - development

  defaultdb:
    container_name: defaultdb
    build:
      context: ./backend/mysql
      dockerfile: Dockerfile.mysql
    command: --innodb-use-native-aio=0
    environment:
      TZ: Asia/Tokyo
      COMPOSE_CONVERT_WINDOWS_PATHS: 1
      MYSQL_ROOT_PASSWORD: mysecret
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: dbuser
    volumes:
      - ./conf.d/:/etc/mysql/conf.d
      - ./initdb/:/docker-entrypoint-initdb.d
      - datastore:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - default
      - development

  app:
    container_name: app
    build:
      context: ./frontend/app
      dockerfile: Dockerfile.app
      args:
        - "PHP_VERSION=7.2.22"
        - "PHP_BUILD_CONFIGURE_OPTS=--with-pear"
        - "PHP_BUILD_EXTRA_MAKE_ARGUMENTS=-j4"
        - "PECL_INSTALL='igbinary msgpack memcached redis'"
    command: confd -backend env
    environment:
      TZ: Asia/Tokyo
      LANG: ja_JP.UTF-8
    ports:
      - 80:80
      - 443:443
    networks:
      - default
      - development

  adminer:
    container_name: adminer
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - default
      - development

  minio:
    container_name: minio
    image: minio/minio
    command: server http://minio{1...4}/export
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio
    volumes:
      - s3store:/export
    ports:
      - "9000:9000"
    networks:
      - default
      - development

volumes:
  workdir:
    driver_opts:
      type: none
      device: $HOME/volumes2/work
      o: bind
  datastore:
    driver_opts:
      type: none
      device: $HOME/volumes2/datastore
      o: bind
  redisstore:
    driver_opts:
      type: none
      device: $HOME/volumes2/redisstore
      o: bind
  s3store:
    driver_opts:
      type: none
      device: $HOME/volumes2/s3store
      o: bind
networks:
  development:
    external: true
